{
	"info": {
		"_postman_id": "c5f38341-ab92-4798-834b-3c10758fffcb",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20933158"
	},
	"item": [
		{
			"name": "N1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"SC 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/first",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "N2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"SC 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var N2 = pm.response.json();\r",
							"var name=N2.name;\r",
							"var age=parseInt(N2.age);\r",
							"var salary=N2.salary;\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(name).to.eql(\"Vasiliy\");\r",
							"});\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(age).to.eql(30);\r",
							"});\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var request = request.data;\r",
							"var name_req=request.name;\r",
							"var age_req=parseInt(request.age);\r",
							"var salary_req=parseInt(request.salary);\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test name_2\", function () {\r",
							"    pm.expect(name).to.eql(name_req);\r",
							"});\r",
							"pm.test(\"Your test age_2\", function () {\r",
							"    pm.expect(age).to.eql(age_req);\r",
							"}); \r",
							"pm.test(\"Your test salary_2\", function() {\r",
							"    pm.expect(salary).to.eql(salary_req);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family:\",N2.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function() {\r",
							"    pm.expect(N2.family.u_salary_1_5_year).to.eql(salary_req*4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vasiliy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "N3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"SC 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"var response = pm.response.json();\r",
							"var name_resp=response.name;\r",
							"var age_resp=parseInt(response.age);\r",
							"var salary_resp=response.salary;\r",
							"var request = pm.request.url.query.toObject();\r",
							"var name_req=request.name;\r",
							"var age_req=parseInt(request.age);\r",
							"var salary_req=parseInt(request.salary);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"test name\", function() {\r",
							"    pm.expect(name_resp).to.eql(name_req);\r",
							"});\r",
							"pm.test(\"test age\", function() {\r",
							"    pm.expect(age_resp).to.eql(age_req);\r",
							"});\r",
							"pm.test(\"test salary\", function() {\r",
							"    pm.expect(salary_resp).to.eql(salary_req);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"family:\",response.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_name\", function () {\r",
							"    pm.expect(response.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"pm.test(\"Dog_age\", function () {\r",
							"    pm.expect(response.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Name_Luky\", function () {\r",
							"    pm.expect(response.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"pm.test(\"Age_Luky\", function () {\r",
							"    pm.expect(response.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name=Ekaterina&age=25&salary=1700",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "N4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"SC 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"var response = pm.response.json();\r",
							"var name_resp=response.name;\r",
							"var age_resp=parseInt(response.age);\r",
							"var salary_resp=response.salary;\r",
							"var request = pm.request.url.query.toObject();\r",
							"var name_req=request.name;\r",
							"var age_req=parseInt(request.age);\r",
							"var salary_req=parseInt(request.salary);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"test name\", function() {\r",
							"    pm.expect(name_resp).to.eql(name_req);\r",
							"});\r",
							"pm.test(\"test age\", function() {\r",
							"    pm.expect(age_resp).to.eql(age_req);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary:\",salary_req);\r",
							"console.log(\"Salary:\",salary_resp);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary:\",salary_resp[0]);\r",
							"console.log(\"Salary:\",salary_resp[1]);\r",
							"console.log(\"Salary:\",salary_resp[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_0\", function() {\r",
							"    pm.expect(salary_resp[0]).to.eql(salary_req);\r",
							"});\r",
							"pm.test(\"salary_1\", function() {\r",
							"    pm.expect(parseInt(salary_resp[1])).to.eql(salary_req*2);\r",
							"});\r",
							"pm.test(\"salary_2\", function() {\r",
							"    pm.expect(parseInt(salary_resp[2])).to.eql(salary_req*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"name\",name_resp);\r",
							"pm.environment.set(\"age\",age_resp);\r",
							"pm.environment.set(\"salary\",salary_resp[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var arr_length=salary_resp.length;\r",
							"for (i = 0; i < arr_length; i++) {\r",
							"  console.log(\"salary\",parseInt(salary_resp[i]));\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name=Ekaterina&age=25&salary=1700",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ekaterina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "N5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"SC 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"var response = pm.response.json();\r",
							"var request = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Start_salary\", function () {\r",
							"    pm.expect(response).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"pm.test(\"Salary_6m\", function () {\r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"pm.test(\"Salary_12m\", function () {\r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"pm.test(\"Salary_1.5y\", function () {\r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"pm.test(\"Salary_3.5y\", function () {\r",
							"    pm.expect(response).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(response).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"start_salary_check\", function() {\r",
							"    pm.expect(response.start_qa_salary).to.eql(parseInt(request.salary));\r",
							"});\r",
							"pm.test(\"6m_salary_check\", function() {\r",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(request.salary*2);\r",
							"});\r",
							"pm.test(\"12m_salary_check\", function() {\r",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(request.salary*2.7);\r",
							"});\r",
							"pm.test(\"1.5_salary_check\", function() {\r",
							"    pm.expect(response['qa_salary_after_1.5_year']).to.eql(request.salary*3.3);\r",
							"});\r",
							"pm.test(\"3.5_salary_check\", function() {\r",
							"    pm.expect(response['qa_salary_after_3.5_years']).to.eql(request.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person_u_name\", function() {\r",
							"    pm.expect(response.person.u_name[1]).to.eql(parseInt(request.salary));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"age\", function() {\r",
							"    pm.expect(response.person.u_age).to.eql(parseInt(request.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_5y\", function() {\r",
							"    pm.expect(response.person.u_salary_5_years).to.eql(parseInt(request.salary)*4.2);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"console.log(\"Содержимое параметра person:\");\r",
							"for (i in response.person) {\r",
							"    if (response.person[1]) {\r",
							"        for (k = 0; k < response.person[1].length; k++) {\r",
							"            console.log(\"Ключ - u_name, значение \" + k + \" - \" + response.person[1][k]);\r",
							"        }\r",
							"    } else {\r",
							"        console.log(\"Ключ - \" + i, \"значение - \" + response.person[i]);\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}